{
  "projects":{
    "gold":{
      "title":"Godiva Gold",
      "short":"A interactive hero module to help users explore the gold discovery collection",
      "desc":"The Godiva Gold hero features a chocolate box where the user can discover each unique chocolate in the collection. The experience opens with a shimmering box on display, activated by mouse movement or accelerometer on mobile. The box then opens, and clicking each piece reveals additional details and content. The project was done with javascript and css animations.",
      "img":"assets/image/gold.jpg",
      "alt":"Image of godiva gold",
      "live":"http://www.godiva.com/gold-discovery",
      "links":[
        {
          "img":"assets/image/circle-right.svg",
          "alt":"Arrow Icon",
          "text":"View it Live",
          "link":"http://www.godiva.com/gold-discovery"
        }
      ],
      "supplementary":{
        "title":"Interactive Elements",
        "desc":"Each chocolate is clickable to reveal a content box complete with movie player. In order to make this hero fully responsive, the position of pop-ups depends on screen width, and changes to a carousel on mobile. This project used scene7 image and video assets, and demandware for content management on the back-end.",
        "img":"assets/image/gold_two.jpg",
        "alt":"Tiger center web interface on a computer display, sitting in an office"
      }
    },
    "knox":{
      "title":"Samsung Knox",
      "short":"A page for Samsung Business showcasing the benefits of the Samsung Knox mobile security platform for business Employees and their IT departments.",
      "desc":"Samsung Knox was a unique project in that it targeted two completely different audiences on one url. I was able to act as lead developer on the project, establishing architecture for the page, implementing pixel perfect styles which are fully responsive, and making all interactive elements on the page from scratch.",
      "img":"assets/image/samsung.jpg",
      "alt":"Image of samsung knox webpage",
      "live":"https://www.samsung.com/us/business/solutions/samsung-knox/",
      "links":[
        {
          "img":"assets/image/circle-right.svg",
          "alt":"Arrow Icon",
          "text":"View it Live",
          "link":"https://www.samsung.com/us/business/solutions/samsung-knox/"
        }
      ],
      "supplementary":{
        "title":"Interactive Elements",
        "desc":"A main feature of the page was an interactive phone which expands to give the user more details about each layer in the security platform. This section was built entirely in css, with click events only setting which layer was active. Using sass, a dynamic system for structuring each layer to line up perfectly with the intro video was integral as the component was in development before we had the final creative to match it against.",
        "img":"assets/image/samsung_supplement.jpg",
        "alt":"Tiger center web interface on a computer display, sitting in an office"
      }
    },
    "snowday":{
      "title":"Sapient Snowday",
      "short":"A virtual reality snowball fight in your browser. Grab a phone, mouse or google cardboard - this game build off of a flexible vr engine built off of threejs is worth a play.",
      "desc":"Snowday is a VR game made for the browser using an engine built by Kyle Larson and I while working at SapientNitro. The game places the user in a winter wonderland, where they must take down arctic enemies with snowballs in order to stay alive. My personal role in the snowday game was largely development of scripts used in the level, including things like score tracking, death animations, interface and logic for tracking and indicating where the closest enemy is - among other features.<br/><br/> Coming from a web background, this was truly a learning experience in terms of working in 3-d, and built nicely off of my past experience with building web experiences in html5 canvas.",
      "img":"assets/image/snowday.png",
      "alt":"Screenshot of snowday vr experience",
      "live":"http://vrcard.netlify.com",
      "links":[
        {
          "img":"assets/image/circle-right.svg",
          "alt":"Arrow Icon",
          "text":"Play Snowday",
          "link":"http://vrcard.netlify.com"
        }
      ],
      "supplementary":{
        "title":"Nitrojs",
        "desc":"The engine was built atop three.js and webvr pollyfill. It includes features including asset parsing, level and script authoring capabilities, and an update loop cable of handling 3-d models, positioning, and target hitting calculations. Main architecture credit goes to Kyle Larson, While I personally contributed to many aspects of the engine under his direction. <br/><br/>The goal of this project was to make an engine that was powerful enough to handle our Snowday experience, yet flexible enough that it could be used to author other various web experiences to fit the needs of clients of SapientNitro. Our goal is to opensource this first within the agency, and then from there expand to be truly opensource.",
        "img":"assets/image/snowday_two.png",
        "alt":"nitrojs logo"
      }
    },
    "transrocspeaks":{
      "title":"Trans Rochester Speaks",
      "short":"A digital exhibit on the history of trans people in Rochester, NY. Oral histories, photography, and resources for the trans community and allies are showcased within this webapp built in sass and handlebars.",
      "desc":"Trans Rochester Speaks is a site which brings digital form to Benjamin Eshlemen's work showcasing the oral histories of trans people in Rochester, New York.  It showcases stories of individuals talking about their lives, speaking on topics relative to the community, it also has a timeline of trans history and a glossary of relevant terms. <br/><br/>This was a multidisciplanary team consisting of a designer, developer, digital historian, and photographer. The target audience for this project was tablet users at the ImagineRIT festival, highlighting Ben's work and the digital humanities department.",
      "img":"assets/image/trans_roc.jpg",
      "alt":"Screenshot of snowday vr experience",
      "live":"http://www.rit.edu/cla/transrochesterspeaks/",
      "links":[
        {
          "img":"assets/image/circle-right.svg",
          "alt":"Arrow Icon",
          "text":"Live Site",
          "link":"http://www.rit.edu/cla/transrochesterspeaks/"
        },
        {
          "img":"assets/image/github2.svg",
          "alt":"Arrow Icon",
          "text":"View the Code",
          "link":"https://github.com/cmbackus/trans-oral-history"
        },
        {
          "img":"assets/image/circle-right.svg",
          "alt":"SVG Arrow",
          "text":"Digital Humanities at RIT",
          "link":"https://www.rit.edu/cla/dhss/projects%23node-330#node-330"
        }
      ],
      "supplementary":{
        "title":"Dynamic Site Architecture",
        "desc":"The website was developed using handlebars.js to handle the data heavy site. This allowed the flexibility to rearrange content and update copy as the site was developed while content was still being finalized. The single page setup of this content heavy site would lend itself quite easily to an update into reactjs. <br/><br/>Lessons learned include: Handling page load for audio and large image files, and a need for improved responsive design on mobile, due to the short timeline of the project and a unique target audience of tablet users for the festival itself.",
        "img":"assets/image/trans_roc_secondary.png",
        "alt":"soundcloud imbed on trans rochester speaks site"
      }
    },
    "marcel":{
      "title":"Publicis Marcel",
      "short":"Publicis Marcel is an internal tool for Publicis Groupe, harnessing their global workforce through the 'Power of One'. I had the pleasure of helping build Marcel's design system from the ground up, and helping it scale to accomodate 5+ feature teams around the globe.",
      "desc":"The Marcel design system emerged at an interesting time on the project - while backend infrastructure and a mobile app already existed, the main interface previously had been voice, so in terms of UI we were starting from scratch. Sitting alongside designers, content creators, and backend devs, the biggest challenge became deducing what would stick around in the system vs what would be removed a few iterations later. What started as a scrappy team of 4 devs grew to 5+ web feature teams over the course of my time on the project.",
      "img":"assets/image/trans_roc.jpg",
      "alt":"Screenshot of snowday vr experience",
      "live":"http://www.rit.edu/cla/transrochesterspeaks/",
      "links":[
        {
          "img":"assets/image/circle-right.svg",
          "alt":"Arrow Icon",
          "text":"Live Site",
          "link":"https://marcel.ai/"
        }
      ],
      "supplementary":{
        "title":"Dynamic Site Architecture",
        "desc":"The website was developed using handlebars.js to handle the data heavy site. This allowed the flexibility to rearrange content and update copy as the site was developed while content was still being finalized. The single page setup of this content heavy site would lend itself quite easily to an update into reactjs. <br/><br/>Lessons learned include: Handling page load for audio and large image files, and a need for improved responsive design on mobile, due to the short timeline of the project and a unique target audience of tablet users for the festival itself.",
        "img":"assets/image/trans_roc_secondary.png",
        "alt":"soundcloud imbed on trans rochester speaks site"
      }
    },
    "encore":{
      "title":"Spotify Encore",
      "short":"While on contract with the Encore Design Systems team at Spotify, I've been fortunate to participate in initiatives ranging from accessibility, to a typescale migration and forward compatibility. Featured here is my article on Customization vs Configuration in Design Systems",
      "desc":"",
      "img":"",
      "alt":"imagery of encore logo",
      "supplementary":{
        "title":"Customization vs. Configuration",
        "desc":"The website was developed using handlebars.js to handle the data heavy site. This allowed the flexibility to rearrange content and update copy as the site was developed while content was still being finalized. The single page setup of this content heavy site would lend itself quite easily to an update into reactjs. <br/><br/>Lessons learned include: Handling page load for audio and large image files, and a need for improved responsive design on mobile, due to the short timeline of the project and a unique target audience of tablet users for the festival itself.",
        "img":"",
        "alt":"soundcloud imbed on trans rochester speaks site"
      }
    }
}
}
